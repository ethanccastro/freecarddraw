name: Deploy to EC2

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Determine branch to checkout
      id: get_branch
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.get_branch.outputs.branch }} # Checkout the correct branch

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-west-1

    - name: Create SSH key file
      run: |
        set -x  # Enable command echoing
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/deploy_key
        
        # Debug information
        echo "=== DEBUG INFORMATION ==="
        echo "EC2 Host: ${{ secrets.EC2_HOST }}"
        echo "Testing host connectivity..."
        ping -c 1 ${{ secrets.EC2_HOST }} || echo "Ping failed - this is normal if ICMP is blocked"
        
        echo "=== SSH-KEYSCAN ATTEMPT ==="
        # First, try to get the host key without saving it
        ssh-keyscan -H -v ${{ secrets.EC2_HOST }} 2>&1 || {
          echo "Initial ssh-keyscan failed. This might be due to:"
          echo "1. EC2 instance not running"
          echo "2. Security group not allowing SSH (port 22)"
          echo "3. EC2 host address is incorrect"
          echo "4. Network connectivity issues"
          exit 1
        }
        
        # If successful, add to known_hosts
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        echo "=== SSH CONNECTION ATTEMPT ==="
        ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"' 2>&1 || {
          echo "=== SSH CONNECTION FAILED ==="
          echo "=== KEY FILE FORMAT ==="
          head -n 1 ~/.ssh/deploy_key
          echo "=== KEY FILE PERMISSIONS ==="
          ls -l ~/.ssh/deploy_key
          echo "=== SSH AGENT STATUS ==="
          ssh-add -l
          echo "=== SSH CONNECTION ATTEMPT ==="
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"' 2>&1
          exit 1
        }

    - name: Set environment variables
      run: |
        if [[ "${{ steps.get_branch.outputs.branch }}" == "main" ]]; then
          echo "Setting up production environment"
          cat << EOF > .env
        PORT=${{ secrets.PROD_PORT }}
        URL=${{ secrets.PROD_URL }}
        URI=${{ secrets.PROD_URI }}
        MYSQL_HOST=${{ secrets.PROD_MYSQL_HOST }}
        MYSQL_USER=${{ secrets.PROD_MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
        MYSQL_PORT=${{ secrets.PROD_MYSQL_PORT }}
        MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }}
        NODEMAILER_HOST=${{ secrets.PROD_NODEMAILER_HOST }}
        NODEMAILER_POST=${{ secrets.PROD_NODEMAILER_POST }}
        NODEMAILER_AUTH_USER=${{ secrets.PROD_NODEMAILER_AUTH_USER }}
        NODEMAILER_AUTH_PASS=${{ secrets.PROD_NODEMAILER_AUTH_PASS }}
        EOF
        else
          echo "Setting up development environment for branch ${{ steps.get_branch.outputs.branch }}"
          cat << EOF > .env
        PORT=${{ secrets.DEV_PORT }}
        URL=${{ secrets.DEV_URL }}
        URI=${{ secrets.DEV_URI }}
        MYSQL_HOST=${{ secrets.DEV_MYSQL_HOST }}
        MYSQL_USER=${{ secrets.DEV_MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.DEV_MYSQL_PASSWORD }}
        MYSQL_PORT=${{ secrets.DEV_MYSQL_PORT }}
        MYSQL_DATABASE=${{ secrets.DEV_MYSQL_DATABASE }}
        NODEMAILER_HOST=${{ secrets.DEV_NODEMAILER_HOST }}
        NODEMAILER_POST=${{ secrets.DEV_NODEMAILER_POST }}
        NODEMAILER_AUTH_USER=${{ secrets.DEV_NODEMAILER_AUTH_USER }}
        NODEMAILER_AUTH_PASS=${{ secrets.DEV_NODEMAILER_AUTH_PASS }}
        EOF
        fi

    - name: Deploy to EC2
      run: |
        # Copy files to EC2
        echo "Starting file transfer..."
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          --exclude '.github' \
          --exclude 'node_modules' \
          ./ ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/ || exit 1

        echo "Files transferred successfully. Starting deployment..."
        
        # Execute deployment commands on EC2
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} '
          set -e
          cd /home/ubuntu/app
          echo "Installing dependencies..."
          npm install
          echo "Reloading systemd..."
          sudo systemctl daemon-reload
          echo "Enabling service..."
          sudo systemctl enable giftcard-giveaway.service
          echo "Restarting services..."
          sudo systemctl restart giftcard-giveaway.service
          sudo systemctl restart caddy.service
          echo "Deployment completed successfully!"
        ' || exit 1