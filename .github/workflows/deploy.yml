name: Deploy to EC2

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent infinite runs

    steps:
    - name: Determine branch to checkout
      id: get_branch
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.get_branch.outputs.branch }} # Checkout the correct branch

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-west-1

    - name: Verify Environment Variables
      run: |
        set -e
        echo "Verifying required environment variables..."
        if [ -z "${{ secrets.EC2_HOST }}" ]; then
          echo "Error: EC2_HOST is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "Error: SSH_PRIVATE_KEY is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_KEY }}" ]; then
          echo "Error: AWS credentials are not set"
          exit 1
        fi
        echo "All required environment variables are set"

    - name: Create SSH key file
      run: |
        set -e
        echo "Setting up SSH key..."
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/deploy_key

    - name: Set environment variables
      run: |
        set -e
        if [[ "${{ steps.get_branch.outputs.branch }}" == "main" ]]; then
          echo "Setting up production environment"
          cat << EOF > .env
        PORT=${{ secrets.PROD_PORT }}
        URL=${{ secrets.PROD_URL }}
        URI=${{ secrets.PROD_URI }}
        MYSQL_HOST=${{ secrets.PROD_MYSQL_HOST }}
        MYSQL_USER=${{ secrets.PROD_MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
        MYSQL_PORT=${{ secrets.PROD_MYSQL_PORT }}
        MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }}
        NODEMAILER_HOST=${{ secrets.PROD_NODEMAILER_HOST }}
        NODEMAILER_POST=${{ secrets.PROD_NODEMAILER_POST }}
        NODEMAILER_AUTH_USER=${{ secrets.PROD_NODEMAILER_AUTH_USER }}
        NODEMAILER_AUTH_PASS=${{ secrets.PROD_NODEMAILER_AUTH_PASS }}
        EOF
        else
          echo "Setting up development environment for branch ${{ steps.get_branch.outputs.branch }}"
          cat << EOF > .env
        PORT=${{ secrets.DEV_PORT }}
        URL=${{ secrets.DEV_URL }}
        URI=${{ secrets.DEV_URI }}
        MYSQL_HOST=${{ secrets.DEV_MYSQL_HOST }}
        MYSQL_USER=${{ secrets.DEV_MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.DEV_MYSQL_PASSWORD }}
        MYSQL_PORT=${{ secrets.DEV_MYSQL_PORT }}
        MYSQL_DATABASE=${{ secrets.DEV_MYSQL_DATABASE }}
        NODEMAILER_HOST=${{ secrets.DEV_NODEMAILER_HOST }}
        NODEMAILER_POST=${{ secrets.DEV_NODEMAILER_POST }}
        NODEMAILER_AUTH_USER=${{ secrets.DEV_NODEMAILER_AUTH_USER }}
        NODEMAILER_AUTH_PASS=${{ secrets.DEV_NODEMAILER_AUTH_PASS }}
        EOF
        fi

    - name: Backup Current Version
      run: |
        set -e
        echo "Creating backup of current version..."
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} '
          if [ -d "/home/ubuntu/app" ]; then
            tar -czf /home/ubuntu/app_backup_$(date +%Y%m%d_%H%M%S).tar.gz /home/ubuntu/app
            echo "Backup created successfully"
          else
            echo "No existing app directory to backup"
          fi
        '

    - name: Deploy to EC2
      run: |
        set -e
        echo "Starting deployment to ${{ steps.get_branch.outputs.branch }} environment..."
        
        # Copy files to EC2
        echo "Starting file transfer..."
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          --exclude '.github' \
          --exclude 'node_modules' \
          ./ ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/ || exit 1

        echo "Files transferred successfully. Starting deployment..."
        
        # Execute deployment commands on EC2
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} '
          set -e
          cd /home/ubuntu/app
          echo "Installing dependencies..."
          npm install
          echo "Reloading systemd..."
          sudo systemctl daemon-reload
          echo "Enabling service..."
          sudo systemctl enable giftcard-giveaway.service
          echo "Restarting services..."
          sudo systemctl restart giftcard-giveaway.service
          sudo systemctl restart caddy.service
          echo "Deployment completed successfully!"
        ' || exit 1

    - name: Verify Deployment
      run: |
        set -e
        echo "Verifying deployment..."
        # Wait for services to start
        sleep 10
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} '
          # Check if the service is running
          if ! systemctl is-active --quiet giftcard-giveaway.service; then
            echo "Error: giftcard-giveaway.service is not running"
            exit 1
          fi
          # Check if Caddy is running
          if ! systemctl is-active --quiet caddy.service; then
            echo "Error: caddy.service is not running"
            exit 1
          fi
          # Try to curl the health endpoint
          if ! curl -f http://localhost:${{ secrets.PORT }}/health; then
            echo "Error: Health check failed"
            exit 1
          fi
          echo "Deployment verification successful"
        '

    - name: Cleanup SSH keys
      if: always()
      run: |
        echo "Cleaning up SSH keys..."
        rm -f ~/.ssh/deploy_key
        ssh-add -d ~/.ssh/deploy_key || true

    - name: Rollback on Failure
      if: failure()
      run: |
        set -e
        echo "Deployment failed, attempting rollback..."
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} '
          if [ -f "/home/ubuntu/app_backup_*.tar.gz" ]; then
            echo "Restoring from latest backup..."
            sudo systemctl stop giftcard-giveaway.service
            rm -rf /home/ubuntu/app
            tar -xzf $(ls -t /home/ubuntu/app_backup_*.tar.gz | head -1) -C /home/ubuntu/
            sudo systemctl start giftcard-giveaway.service
            echo "Rollback completed successfully"
          else
            echo "No backup found for rollback"
            exit 1
          fi
        '